Godwin Nwachukwu  to  Everyone 10:58 PM
function hurdleRace(k, height) {
    // Write your code here
    
    // 1. find the max_height in the height array
    let maxHeight = height[0];
    for (let i = 1; i < height.length; i++) {
        if ( maxHeight < height[i]) {
            maxHeight = height[i];
        }
    }
    // 2. compare max_height value to k, if greater than k, subtract k from               max_height,
        // else return zero
    if (maxHeight > k) {
        return maxHeight - k;
    }
    return 0;
}

Godwin Nwachukwu  to  Everyone 10:58 PM
// max number calculation
let height = [10, 4, 8, 11, 20];

function max_number(heightArr) {
  let maxHeight = heightArr[0];
  
  for (let i = 1; i < heightArr.length; i++) {
    if (maxHeight > heightArr[i]) {
      maxHeight = heightArr[i];
    }
  }
  
  return maxHeight;
}

let finalanswer = max_number(height);
console.log(finalanswer);
console.log(max_number(height));

// at i = 1;
// maxheight = 10
// if (maxheight < heightarr[1]){skip}
// maxheight = 10
// i++;

// at i = 2
// maxheight = 10
// if (maxheight < heightarr[2]){skip}
// maxheight = 10
// i++;

// at i = 3
// maxheight = 10
// if (maxheight < heightarr[3]){maxheight = heightarr[3]}
// maxheight = 11
// i++;

// at i = 4
// maxheight = 11
// if (maxheight < heightarr[4]){maxheight = heightarr[4]}
// maxheight = 20;
// i++;

// at i = 5
//forloop stops running
// maxheight = 20;




// algo_checkpoint
// senLength, numWords, numVowels, lengthCounter, wordCounter, vowelCounter.

let phrase = 'the quick brown fox jump over the lazy dog.'

function readSentence(sentence) {
 let senLength = sentence.length;
 let wordCounter = 0;
 let vowels = ['a', 'e', 'i', 'o', 'u'];
  let phrase1 = sentence.split(' ');
  console.log(phrase1)
 for ( i=0; i<sentence.length; i++) {
   // if (sentence[i] = ' '){
   //   wordCounter = wordCounter + 1;
   // }
   // console.log(sentence[i])
 } 
 return [senLength, phrase1.length];
}

console.log(readSentence(phrase)) 

// // version 1
function miniMaxSum(arr) {
  function findMax(ar) {
    let max = ar[0];
    for (let e = 0; e < ar.length; e++) {
      if (max < ar[e]) {
          max = ar[e];
      }
    }
    return max;
  }

  function findMin(ar) {
    let min = ar[0];
    for (let e = 0; e < ar.length; e++) {
      if (min > ar[e]) {
          min = ar[e];
      }
    }
    return min;
  }
  
  let nums = [];
  for (let i = 0; i < arr.length; i++) {
    let arr1 = arr;
    let res = [];
    let currentValue = i;
    for (let j = 0; j < arr1.length; j++) {
      if (currentValue !== j) {
        res.push(arr1[j]);
      }
      console.log(res)
    }
    let value = 0;
    for (let e = 0; e < res.length; e++) {
      value += res[e];
    }
    nums.push(value);
    console.log(res)
  }
  console.log(nums)
  let finalResult = [findMin(nums), findMax(nums)];
  console.log(finalResult[0], finalResult[1]);
}

// At i = 0
  // nums = []
  // res = []
  // currentvalue = 0
  // j = 0
  // if 0 isnotequal to 0 (false)
  // res = []
  // j = 1
  // if 0 isnotequal to 1 (true)
  // // res.push(56)
  // res = [56]
  // j = 2
  // if 0 isnotequal to 2 (true)
  // // res.push(90)
  // res = [56, 90]
  // j = 3
  // if 0 isnotequal to 3 (true)
  // // res.push(150)
  // res = [56, 90, 150]
  // j = 4
  // if 0 isnotequal to 4 (true)
  // // res.push(5)
  // res = [56, 90, 150, 5]
  // value = 0
  // value = 301
  // nums.push(301)
  // nums = [301]

// At i = 1
  // nums = []
  // res = []
  // currentvalue = 1
  // j = 0
  // if 1 isnotequal to 0 (true)
  // res.push(80)
  // res = [80]
  // j = 1
  // if 1 isnotequal to 1 (false)
  // res = [80]
  // j = 2
  // if 1 isnotequal to 2 (true)
  // // res.push(90)
  // res = [80, 90]
  // j = 3
  // if 1 isnotequal to 3 (true)
  // // res.push(150)
  // res = [80, 90, 150]
  // j = 4
  // if 1 isnotequal to 4 (true)
  // // res.push(5)
  // res = [80, 90, 150, 5]
  // value = 0
  // value = 325
  // nums.push(325)
  // nums = [301, 325]



// version 2
function miniMaxSum(integerArray) {
  let summedUpIntegerArray = [];
  for (let i = 0; i < integerArray.length; i++) {
    let value = 0;
    let currentIndex = i;
    for (let j = 0; j < integerArray.length; j++) {
      let nestedIndex = j;
      if (currentIndex !== nestedIndex) {
        value += integerArray[nestedIndex];
      }
    }
    summedUpIntegerArray.push(value);
    console.log(summedUpIntegerArray);
  } 
  
  let resultArray = [Math.min(...summedUpIntegerArray), Math.max(...summedUpIntegerArray)];
  console.log(resultArray[0], resultArray[1]);
}

// final version 3
function miniMaxSum(integerArray) {
  // sum of numbers in integer array
  let totalSum = integerArray.reduce((a, b) => a + b, 0);

  // dot map function to get the sum of only 4 numbers for each excluding current index
  let summedUpIntegerArray = integerArray.map((currentValue) => {
    let sumWithoutCurrent = totalSum - currentValue;
    return sumWithoutCurrent;
  });

  console.log(summedUpIntegerArray);
  // find the minimum and maximum numbers of summedUpIntarr and package it as an array
  let resultArray = [Math.min(...summedUpIntegerArray), Math.max(...summedUpIntegerArray)];
  console.log(resultArray[0], resultArray[1]);
}

miniMaxSum([80, 56, 90, 150, 5]);